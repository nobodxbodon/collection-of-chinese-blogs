using csv
using os
using time

源数据路径  = os.path.join(os.getcwd(), "源数据/博客聚合/")

路径表 = {
    // 自定义的改为用域名作键值
    "www.barretlee.com": "blog/src/_posts",
    "f2h2h1.github.io": "article",
    "xieguanglei.github.io": "source",
    "gitee.com/MulanRevive/bounty": "进展小结",
    "gitee.com/Kenneth-Lee-2012/MySummary": "",
    "cyril3.github.io": "",
    "lihan3238.github.io": "content/post",
    "lutaonan.com": "src/pages/blog",
    "youerning.top": "",
    "www.zhaohuabing.com": "content/post",
    "kexizeroing.github.io": "src/blog",
    // 下面为通用格式
    "hexo": "source/_posts",
    "gridsome": "content/posts",
    "hugo": "content",   // 多数置于 posts下，但少数有自定义路径如 jalenchuh
    "astro": "src/posts",
    "": "_posts"  // Jekyll 默认
}

仓库表 = {:}
格式表 = {:}
try 仓库数据=open("原型/仓库列表.csv") {
    for 行 in csv.reader(仓库数据, delimiter=',') { 仓库表[行[0]] = 行[1]; 格式表[行[0]] = 行[2] }
}

func 写入csv文件(文件名, 内容) {
  try 文件=open(文件名, "w", newline='') {
    写入 = csv.writer(文件)
    for 行 in 内容 {
        写入.writerow(行)
    }
  }
}

func 转换git时间格式(git时间戳) {
  时间点 = time.strptime(git时间戳, "%a %b %d %H:%M:%S %Y %z")
  return time.strftime("%Y-%m-%dT%H:%M:%S", 时间点)
}

func 取所占空间(目录) {
    空间 = 0
    for 当前路径, 目录名, 所有文件 in os.walk(目录) {
        for 文件 in 所有文件 {
            文件路径 = os.path.join(当前路径, 文件)

            continue if os.path.islink(文件路径)
            try {
                文件大小 = os.path.getsize(文件路径)
            } catch e {
                print("取不了大小：`文件路径`")
            }

            空间 += 文件大小
        }
    }
    return 空间/1000
}

/* 下为测试工具 */

func 确认相等(目标, 现实, 反馈="") {
  assert(现实 == 目标, "`反馈` 有误:\n目标为" + 字符串带边界(目标) + "\n现实为" + 字符串带边界(现实))
}

func 字符串带边界(内容) {
  return '"`str(内容)`"'
}