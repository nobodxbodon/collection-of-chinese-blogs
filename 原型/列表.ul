using Template in jinja2
using urllib.parse
using * in 原型.md相关
using * in 原型.网页相关
using 取文件最初提交时间 in 原型.git功用

// 所有基本测试

using 原型.md相关测试
using 原型.网页相关测试

重新生成 = false

所有博文 = []
所有简报 = []
for 仓库地址 in 仓库表 {
    目标目录 = 仓库表[仓库地址]
    格式 = 格式表[仓库地址]
    仓库本地路径 = os.path.join(源数据路径, 目标目录, 格式 == "自定义" ? 路径表[目标目录] : 路径表[格式])

    本仓库内简报 = 根据路径提取所有简报(仓库本地路径)

    for 简报 in 本仓库内简报 {
        简报.仓库源地址 = 仓库地址
        简报.时间 = 取时间戳(简报) or 取文件最初提交时间(简报.仓库本地路径, 简报.路径)

        简报.本地相对路径 = 目标目录

        // 待做：在简报记录文件格式，为rst等作准备
        // 有些是 html 内容但是有md头部，如 conge.livingwithfcs.org/freesurfer-2013-course-videos-and-ppts.html
        if 简报.本地相对路径 == "cyril3.github.io" {
          简报.题目 = 取网页题目(简报)
        } else {
          简报.题目 = 取题目(简报)
        }
        所有博文.append(tuple(目标目录, 简报.时间, 简报.题目))

        // 将所有 md 文件转为 html，置于一个目录中
        子目录 = os.path.join("html", 目标目录)
        if !os.path.exists(子目录) {
          os.makedirs(子目录)
        }

        // 待做: 下面为md格式专用, 应清理
        网页文件 = 简报.题目.replace("/", "_") + ".html"
      // 待做：需重命名，避免各种特殊字符无法编译jekyll（需本地构建？）
        if 简报.文件名.endswith(".html") {
          网页文件 = 网页文件.replace(':', '')
        }

        网页路径 = os.path.join(子目录, 网页文件)
        简报.网页 = os.path.join(目标目录, 网页文件)

        // 待做：如网页已生成，反馈此信息
        简报.分类 = 取分类(简报)
        生成网页(简报, 网页路径) if 重新生成 or !os.path.exists(网页路径)
    }

    所有简报 += 本仓库内简报
    println("`目标目录` 无博文！") if !本仓库内简报
}

写入csv文件("原型/博文目录.csv", 所有博文)

func 按时间排序(简报列表) {
  // 如果年份大于今年，则视为无效时间戳，排在最后
  简报列表.sort(key=x -> {
    x.时间 > str(year()) ? "0`x.时间`" : x.时间
  }, reverse=true)
}

// 生成一个索引页，今后可作排序、搜索功能
所有链接 = []
按时间排序(所有简报)
for 简报 in 所有简报 {
  主题 = 简报.题目

  if 简报.本地相对路径 == "xieguanglei.github.io" {
    主题 = 取首行题目(简报) or 主题
  }
  所有链接.append({'题目': 简报.时间 + ' ' + 主题, '链接': urllib.parse.quote(简报.网页)})
}
try 模板文件=open('原型/索引模板.html') {
  模板 = Template(模板文件.read())
}

文章数, 仓库数 = 0, 0
try 统计数据=open("原型/统计数据.csv") {
  for 行 in csv.reader(统计数据, delimiter=',') {
    仓库数 += 1
    文章数 += int(行[1])
  }
}

try 索引=open('html/index.html', 'w') {
  索引.write(模板.render(
    {
      '所有博文': 所有链接,
      '仓库数': 仓库数,
      '文章数': 文章数
    }))
}