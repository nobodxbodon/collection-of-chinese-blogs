using re
using shutil

using mistune
using BeautifulSoup in bs4
using urllib.parse

using * in 原型.通用
using * in 原型.简报定义

func 生成仓库链接(简报) {
  相对路径 = os.path.relpath(简报.路径, os.path.join(源数据路径, 简报.本地相对路径))

  分支 = 'master'
  域名 = 简报.本地相对路径
  if 域名 == "zhangwenli.com" {
    分支 = 'gh-pages'
  }
  // 待做：有些仓库用其他分支
  return "`简报.仓库源地址`/blob/`分支`/`相对路径`"
}

// 一般文件名的前缀为时间戳
func 生成原文链接(简报) {
  文件名 = 简报.文件名
  域名 = 简报.本地相对路径

  //时间戳包含小时等，如 2020-03-26 22:10:27。现暂时仅取日期
  // 待做：是否 hexo 格式通用？
  if 域名 == "jasonkayzk.github.io" or 域名 == "aemoncao.github.io" {
    文件名 = 简报.时间.split(' ')[0] + "-" + 文件名
  } elif 域名 == "blog.mauve.icu" {
    子目录 = 简报.路径[#简报.仓库本地路径 + 1 : -#文件名]
    文件名 = 简报.时间.split(' ')[0] + "-" + 子目录 + 文件名
  } elif 域名 == "qingbob.com" {
    文件名 = re.sub('(\\d{4})-(\\d{2})-(\\d{2})-', '', 文件名)
  } elif 域名 == "objcoding.com" {
    // 月日如为单数字则补0
    文件名 = re.sub('(\\d{4})-(\\d{1})-(\\d{1})-', '\\1-0\\2-0\\3-', 文件名)
    文件名 = re.sub('(\\d{4})-(\\d{2})-(\\d{1})-', '\\1-\\2-0\\3-', 文件名)
    文件名 = re.sub('(\\d{4})-(\\d{1})-(\\d{2})-', '\\1-0\\2-\\3-', 文件名)
  }

  // 2024-02-24- 替换为 2024/02/24/，去掉末尾扩展
  链接化 = re.sub('(\\d{4})-(\\d{2})-(\\d{2})-', '\\1/\\2/\\3/', 文件名).replace('.md', '').strip().replace(' ', '-')

  if 域名 == "iphyer.github.io" or 域名 == "www.barretlee.com" or 域名 == "lutaonan.com" {
    链接化 = "blog/" + 链接化
  } elif 域名 == "youerning.top" {
    链接化 = "post/" + 链接化
  } elif 域名 == "www.zhaohuabing.com" {
    链接化 = "post/" + 文件名.replace('.md', '')
  } elif 域名 == "jalenz.cn" or 域名 == "babyno.top" or 域名 == "sakurawald.github.io"{
    链接化 = "posts/" + 链接化
  } elif 域名 == "f2h2h1.github.io" {
    链接化 = "article/" + 链接化
  } elif 域名 == "tifa-233.com" {
    链接化 = "archives/" + 链接化
  }  elif 域名 == "sund.site" {
    子目录 = 简报.路径[#简报.仓库本地路径 + 1 : -#文件名]
    链接化 = 子目录 + 链接化.lower()
  } elif 域名 == "dianjiaogit.github.io" {
    链接化 = 类别生成部分url(简报) + "/" + 链接化
  } // 待做: 如果 类别生成 url 通用于其他博客, 可简化此两个特殊情况
  elif 域名 == "shiina18.github.io" {
    链接化 = 类别生成部分url(简报) + "/" + 链接化 if 简报.分类
  } elif 域名 == "codeinchinese.com" {
    return "http://" + 域名 + "/" + 链接化
  } elif 域名 == "zhangwenli.com" {
    return "http://" + 域名 + "/blog/" + 链接化
  } elif 域名 == "luyuhuang.tech" or 域名 == "blog.forecho.com" {
    return "https://" + 域名 + "/" + 链接化 + ".html"
  } elif 域名 == "xieguanglei.github.io" {
    return "https://" + 域名 + "/blog/post/" + 简报.题目 + ".html"
  } elif 域名 == "young-lord.github.io" or 域名 == "yuanj.top" {
    return "https://" + 域名 + "/posts/" + 简报.头部信息['slug'] if 简报.头部信息.__contains__('slug')
  } // 以下无单独域名，直接链接到原仓库文件。待做：源文链接 生成完成后，可删除此部分
  elif 域名 == "gitee.com/MulanRevive/bounty" {
    return "https://`域名`/blob/master/`路径表[域名]`/`文件名`"
  } elif 域名 == "gitee.com/Kenneth-Lee-2012/MySummary" {
    return "https://`域名`/blob/master/`简报.路径[#简报.仓库本地路径 : ]`"
  }
  return "https://" + 域名 + "/" + 链接化
}

// TODO:
// - 避免重名
func 生成网页(简报, 网页路径) {
  if 简报.的格式 == 格式.html {
    shutil.copy2(简报.路径, 网页路径)
    // 待做: 添加原文链接
    return
  }

  md文件 = 简报.路径
  try 文件=open(md文件) {
      原内容=文件.read()
  }

  域名 = 简报.本地相对路径
  链接 = 生成原文链接(简报)
  仓库链接 = 生成仓库链接(简报)
  仓库链接md = "[仓库源文](" + 仓库链接 +")"
  站点链接md = "[站点原文](" + 链接 + ")"
  源链接 = 仓库链接 == 链接 or 域名 == 'ditou.org' ? 仓库链接md : 仓库链接md + "，" + 站点链接md
  原内容 = "## `源链接`\n`原内容`"

  if 域名 == "tifa-233.com" {
    版权声明 = "版权声明： 本博客所有文章除特别声明外，均采用 BY-NC-SA 许可协议。转载请注明出处！"
    原内容 = "`版权声明`\n`原内容`"
  }

  评论区 = ""
  if 简报.评论 {
    评论链接 = urllib.parse.quote(os.path.join(os.getcwd(), 'html', 简报.评论[0].网页))
    评论区 = "## 评论：[`简报.评论[0].题目`](`评论链接`)\n"
  }
  原内容 = 评论区 + 原内容

  // 如果表格内容行开头无 | 则不渲染为表格
  网页 = mistune.markdown(原内容)
  try 文件=open(网页路径, 'w') {
    文件.write(补全资源路径(网页, 简报))

    if 域名 == "young-lord.github.io" {
      try 版权=open("原型/各站版权说明/`域名`.html") {
        版权声明=版权.read()
        文件.write(版权声明)
      }
    }
  }
}

/* 搜索图片链接, 如果链接不为 url, 则前缀 根目录+博客子目录, TODO: 检查文件是否存在
 /assets/in-post/2017-05-03-Three-js-Introduction-Study-Note-1.png  =>
 /Users/xuanwu/git/聚聚/博客聚合/hijiangtao.github.io/assets/in-post/2017-05-03-Three-js-Introduction-Study-Note-4.jpg
*/
func 补全资源路径(原网页内容, 简报) {
  页面 = BeautifulSoup(原网页内容, 'html.parser')

  所有图片 = 页面.find_all('img')

  博客子目录 = 简报.本地相对路径
  仓库源地址 = 简报.仓库源地址
  目标目录 = 仓库表[仓库源地址]
  格式 = 格式表[仓库源地址]
  相对路径 = (格式 == "自定义" ? 路径表[目标目录] : 路径表[格式])

  if 博客子目录 == "xieguanglei.github.io" {
    相对路径 = os.path.join(相对路径, 简报.题目)
  }
  for 图片 in 所有图片 {
    图片['src'] = 生成本地图片路径(图片['src'], 格式, 博客子目录, 相对路径)
  }
  return str(页面)
}

func 取网页题目(简报) {
  try 文件=open(简报.路径) {
    网页内容=文件.read()
  }
  页面 = BeautifulSoup(网页内容, 'html.parser')

  题目元素 = 页面.find_all('title')
  return #题目元素 >=1 ? 题目元素[0].string : "无题"
}

func 生成本地图片路径(图片原始路径, 格式, 博客子目录, 仓库相对路径) {
    图片子目录 = 仓库相对路径
    相对路径 = 图片原始路径
    if !图片原始路径.startswith('http') {
      if re.compile("^\/.*").match(图片原始路径) {
        if 格式 == "hexo" {
          图片子目录 = "source"
          相对路径 = 相对路径[1:]
        } // 如为 jekyll, 开头 / 表示仓库根目录
        elif 格式 == "" {
          相对路径 = 相对路径[1:]
          图片子目录 = ""
        }
      }
      return os.path.join(源数据路径, 博客子目录, 图片子目录, 相对路径)
    }
    return 图片原始路径
}

func 类别生成部分url(简报) {
  return '/'.join(map(类别->类别.replace(' ','%20'), 简报.分类))
}