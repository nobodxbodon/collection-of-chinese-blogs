using datetime
using frontmatter
using re

using * in 原型.通用
using * in 原型.简报定义

func 添加头部信息(文件名, 简报) : 简报结构 {
  try 文件=open(文件名, 'r') {
    简报.头部信息 = 解析头部信息(文件.read())
    return 简报
  } catch e : UnicodeDecodeError {
    println('编码不同：`文件名`')
    return 简报
  } catch e {
    println('`e`：`文件名`')
    return 简报
  }
}

/* 将 两个 --- 之间的 YAML 格式内容提取到字典 */
func 解析头部信息(文件内容) {
  内容 = frontmatter.loads(文件内容)
  return 内容.metadata
}

// 2020-04-30-vscode-conventional-commits-extension-cn.md
func 文件名提取时间戳(文件名) {
  分段 = re.search("(\d+-\d+-\d+).+", 文件名)
  return 分段 ? 分段.group(1) : ""
}

// 待做: 已支持 html/rst, 不应置于此库
func 文件名提取题目(文件名) {
  分段 = re.search("(\d+-\d+-\d+)-(.+)\.(\w+)$", 文件名)
  return 分段 ? 分段.group(2) : re.search("(.+)\.(\w+)$", 文件名).group(1)
}

func 剔除引号(文本) {
  分段 = re.search("^\"(.*)\"$", 文本)
  return 分段.group(1) if 分段

  分段 = re.search("(.*)\"(.*)\"(.*)", 文本)
  文本 = 分段.group(1) + "“" + 分段.group(2) + "”" + 分段.group(3) if 分段

  分段 = re.search("^'(.*)'$", 文本)
  return 分段 ? 分段.group(1) : 文本
}

// 一致输出为文本
func 取时间戳(简报) {
  // TODO: 加入格式表
  if 简报.头部信息.__contains__('date') {
    时间戳 = 简报.头部信息['date']
  } elif 简报.头部信息.__contains__('added') {
    时间戳 = 简报.头部信息['added']
  } elif 简报.头部信息.__contains__('modified') {
    时间戳 = 简报.头部信息['modified']
  } elif 简报.头部信息.__contains__('updatedDate') {
    时间戳 = 简报.头部信息['updatedDate']
  } else {
    时间戳 = 文件名提取时间戳(简报.文件名)
  }
  return str(时间戳)
}

func 取分类(简报) {
  if 简报.头部信息.__contains__('categories') {
    各类别 = 简报.头部信息['categories']
    if typeof(各类别) == 'list' {
      return list(map(类 -> 类.lower(), 各类别))
    }
    return 各类别 == nil ? [] : [各类别.lower()]
  }
  return []
}

func 取题目(简报) {
  if 简报.头部信息.__contains__('title') {
    题目 = 简报.头部信息['title']
  } else {
    if 简报.本地相对路径 == "xieguanglei.github.io" {
      题目 = 简报.路径[#简报.仓库本地路径 + 1 : -#"index.md" - 1]
    } else {
      题目 = 文件名提取题目(简报.文件名)
    }
  }
  // 符合 2014-01-01 等格式时，题目为 date
  return 题目 ? 剔除引号(str(题目)) : ''
}

func 取首行题目(简报) {
  try 文件=open(简报.路径, 'r') {
    for 行 in 文件 {
      return 行[1:].strip() if 行[0] == '#'
    }
  }
  return ''
}
