using re

using * in 原型.通用
using * in 原型.简报定义

func 添加头部信息(文件名, 简报) : 简报结构 {
  try 文件=open(文件名, 'r') {
    简报.头部信息 = 解析头部信息(文件.read())
    return 简报
  } catch e : UnicodeDecodeError {
    println('编码不同：`文件名`')
    return 简报
  }
}

/* 将 两个 --- 之间的 YAML 格式内容提取到字典 */
func 解析头部信息(文件内容) {
    简报表 = {:}
    找头部 = re.search("---\n([\s\S]*?)\n---", 文件内容)
    return 简报表 if !找头部

    原始头部 = 找头部.group(1).split("\n")
    头部内容 = list(filter(行内容 -> 行内容, map(行 -> 行.strip(), 原始头部)))

    上个属性名 = ""
    for 行 in 头部内容 {
      分段 = re.search("^(\w+):\s*(.*)", 行)
      if 分段 {
        上个属性名 = 分段.group(1)
        简报表[上个属性名] = 分段.group(2).strip()
      } else {
        // 如 行 不是完整属性，则添加到上个属性值
        // 待做：重构以减少每次处理多个中间格式
        简报表[上个属性名] += " `行`" if 上个属性名
      }
    }
    return 简报表
}

// 2020-04-30-vscode-conventional-commits-extension-cn.md
func 文件名提取时间戳(文件名) {
  分段 = re.search("(\d+-\d+-\d+).+", 文件名)
  return 分段 ? 分段.group(1) : ""
}

// 待做: 已支持 html/rst, 不应置于此库
func 文件名提取题目(文件名) {
  分段 = re.search("(\d+-\d+-\d+)-(.+)\.(\w+)$", 文件名)
  return 分段 ? 分段.group(2) : re.search("(.+)\.(\w+)$", 文件名).group(1)
}

func 剔除引号(文本) {
  分段 = re.search("\"(.*)\"", 文本)
  return 分段.group(1) if 分段
  分段 = re.search("'(.*)'", 文本)
  return 分段 ? 分段.group(1) : 文本
}

func 取时间戳(简报) {
  // TODO: 加入格式表
  if 简报.头部信息.__contains__('date') {
    return 剔除引号(简报.头部信息['date'])
  } elif 简报.头部信息.__contains__('modified') {
    return 剔除引号(简报.头部信息['modified'])
  } else {
    return 文件名提取时间戳(简报.文件名)
  }
}

func 取分类(简报) {
  if 简报.头部信息.__contains__('categories') {
    数据 = 简报.头部信息['categories'].lower()
    多类 = re.search("^\[(.+)\]$", 数据)
    if 多类 {
      return list(map(类别 -> 类别.strip(), 多类.group(1).split(',')))
    }
    换行分类 = 数据.split(' -')
    if #换行分类 == 1 {
      return 换行分类
    } else {
      所有类 = []
      for 部分 in 换行分类 {
        去空 = 部分.strip()
        所有类.append(去空) if 去空
      }
      return 所有类
    }
  }
  return []
}

func 取题目(简报) {
  if 简报.头部信息.__contains__('title') {
    题目 = 简报.头部信息['title']
  } else {
    if 简报.本地相对路径 == "xieguanglei.github.io" {
      题目 = 简报.路径[#简报.仓库本地路径 + 1 : -#"index.md" - 1]
    } else {
      题目 = 文件名提取题目(简报.文件名)
    }
  }
  return 剔除引号(题目)
}

func 取首行题目(简报) {
  try 文件=open(简报.路径, 'r') {
    for 行 in 文件 {
      return 行[1:].strip() if 行[0] == '#'
    }
  }
  return ''
}
